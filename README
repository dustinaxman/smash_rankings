
docker run -v /Users/deaxman/Downloads/test_2023:/data -v ~/.aws:/root/.aws tournament_updater_image --tournament_folder_path /data


docker run -v ~/.aws:/root/.aws tournament_updater_image --tournament_folder_path /data


check ip access:

aws logs filter-log-events \
    --log-group-name "SmashRankerLogs" \
    --start-time $(($(date -v-30d +%s)*1000)) \
    --end-time $(($(date +%s)*1000)) \
    --query 'events[*].message' \
    --output text | awk '{print $1}' | sort | uniq -c | sort -nr


# aws dynamodb delete-table --table-name SmashRankingCache


aws dynamodb describe-table --table-name SmashRankingCache || \
aws dynamodb create-table --table-name SmashRankingCache \
  --attribute-definitions AttributeName=cache_key,AttributeType=S \
  --key-schema AttributeName=cache_key,KeyType=HASH \
  --billing-mode PAY_PER_REQUEST



aws dynamodb create-table \
    --table-name smash-tournaments-tracker-info \
    --attribute-definitions AttributeName=ID,AttributeType=S \
    --key-schema AttributeName=ID,KeyType=HASH \
    --billing-mode PAY_PER_REQUEST


aws dynamodb put-item \
    --table-name smash-tournaments-tracker-info \
    --item '{
        "ID": {"S": "tournament_info"},
        "google_sheets_url": {"S": "https://docs.google.com/spreadsheets/d/1va7cwOc-fAH2fj6dmnE-4i_m2uYhGIkQvha44fExG-k/edit?gid=639215028#gid=639215028"},
        "sheet_name": {"S": "TTS by Date (2024.2)"}
    }'

##TOURNAMENT UPDATER

docker build -f Dockerfile.tournament_updater -t tournament_updater_image .

docker run -v /Users/deaxman/Downloads/all_smash_rankings:/data -v ~/.aws:/root/.aws tournament_updater_image --tournament_folder_path /data


docker build --platform linux/amd64 -f Dockerfile.tournament_updater -t tournament_updater_image .


aws ecr create-repository --repository-name tournament_updater_image --region us-east-1
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 198449958201.dkr.ecr.us-east-1.amazonaws.com

docker tag tournament_updater_image:latest 198449958201.dkr.ecr.us-east-1.amazonaws.com/tournament_updater_image:latest

docker push 198449958201.dkr.ecr.us-east-1.amazonaws.com/tournament_updater_image:latest

aws cloudformation create-stack --stack-name tournament-updater --template-body file://tournament_updater_cloudformation.yaml --parameters ParameterKey=ImageTag,ParameterValue=latest --capabilities CAPABILITY_IAM

#aws cloudformation delete-stack --stack-name tournament-updater

## SMASH RANKING API

docker build --platform linux/amd64 -f Dockerfile.api -t smash-ranker-image .

docker run -v ~/.aws:/root/.aws smash-ranker-image


198449958201.dkr.ecr.${AWS::Region}.amazonaws.com/smash-ranker:${ImageTag}


docker run -p 8000:5000 -v ~/.aws:/root/.aws smash-ranker-image gunicorn -w "1" --timeout 300 -b 0.0.0.0:5000 app:app


curl -s "http://127.0.0.1:8000/get_ranking?ranking_to_run=trueskill&tier_options=P,S%2B,S,A%2B,A&start_date=2024-07-16T00:00:00&end_date=2024-11-06T00:00:00&evaluation_level=sets" | jq .
curl -X GET "http://127.0.0.1:8000/query_tournaments?tier_options=P,S%2B,S,A%2B,A&start_date=2021-06-16T00:00:00&end_date=2022-01-06T00:00:00" | jq .


aws ecr create-repository --repository-name smash-ranker-image --region us-east-1

aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 198449958201.dkr.ecr.us-east-1.amazonaws.com

docker tag smash-ranker-image:latest 198449958201.dkr.ecr.us-east-1.amazonaws.com/smash-ranker-image:latest

docker push 198449958201.dkr.ecr.us-east-1.amazonaws.com/smash-ranker-image:latest


aws cloudformation create-stack --stack-name smash-ranker-api --template-body file://smash_ranking_api_cloudformation_template_serverless.yaml --parameters ParameterKey=ImageTag,ParameterValue=latest --capabilities CAPABILITY_IAM

aws logs filter-log-events \
    --log-group-name "/aws/lambda/SmashRankerFunction" \
    --query 'events[*].{timestamp:timestamp, message:message}' \
    --output text
#aws cloudformation delete-stack --stack-name smash-ranker-api

ApiGatewayRestApi=$(aws cloudformation describe-stack-resources --stack-name smash-ranker-api | jq -r '.StackResources[] | select(.LogicalResourceId == "ApiGatewayRestApi") | .PhysicalResourceId')

curl -s "https://${ApiGatewayRestApi}.execute-api.us-east-1.amazonaws.com/prod/get_ranking?ranking_to_run=trueskill&tier_options=P,S%2B,S,A%2B,A,B,C&start_date=2018-07-16T00:00:00&end_date=2024-11-06T00:00:00&evaluation_level=sets" | jq .



curl -X GET "https://${ApiGatewayRestApi}.execute-api.us-east-1.amazonaws.com/prod/query_tournaments?tier_options=P,S%2B,S,A%2B,A&start_date=2021-06-16T00:00:00&end_date=2022-01-06T00:00:00" | jq .



npx create-react-app smash-ranking-website


cd smash-ranking-website

npm install @mui/material @emotion/react @emotion/styled

npm install axios
npm install query-string


#change all of the files!!!

npm start



npm run build

aws s3api create-bucket --bucket www.smashrankings.com --region us-east-1
aws s3 website s3://www.smashrankings.com/ --index-document index.html --error-document 404.html

aws s3 sync ./build/ s3://www.smashrankings.com/

cat <<EOL > bucket-policy.json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": "*",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::www.smashrankings.com/*"
    }
  ]
}
EOL


aws s3api put-bucket-acl --bucket www.smashrankings.com --acl public-read
aws s3api put-public-access-block --bucket www.smashrankings.com --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false


aws s3api put-bucket-policy --bucket www.smashrankings.com --policy file://bucket-policy.json
http://www.smashrankings.com.s3-website-us-east-1.amazonaws.com



#UPDATE

aws cloudformation delete-stack --stack-name smash-ranker-api

docker build --platform linux/amd64 -f Dockerfile.api -t smash-ranker-image .
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 198449958201.dkr.ecr.us-east-1.amazonaws.com

docker tag smash-ranker-image:latest 198449958201.dkr.ecr.us-east-1.amazonaws.com/smash-ranker-image:latest

docker push 198449958201.dkr.ecr.us-east-1.amazonaws.com/smash-ranker-image:latest


aws cloudformation create-stack --stack-name smash-ranker-api --template-body file://smash_ranking_api_cloudformation_template_serverless.yaml --parameters ParameterKey=ImageTag,ParameterValue=latest --capabilities CAPABILITY_IAM

ApiGatewayRestApi=$(aws cloudformation describe-stack-resources --stack-name smash-ranker-api | jq -r '.StackResources[] | select(.LogicalResourceId == "ApiGatewayRestApi") | .PhysicalResourceId')
echo ${ApiGatewayRestApi}


#update the App.js
cd smash-ranking-website/
npm start
#TEST

npm run build
aws s3 sync ./build/ s3://www.smashrankings.com/
sleep 5
aws cloudfront create-invalidation --distribution-id E3JSLB7SJAP4X0 --paths "/*"






aws cloudwatch get-metric-data \
    --start-time $(date -u -v-24H '+%Y-%m-%dT%H:%M:%SZ') \
    --end-time $(date -u '+%Y-%m-%dT%H:%M:%SZ') \
    --metric-data-queries '[
        {
            "Id": "apiRequestCount",
            "MetricStat": {
                "Metric": {
                    "Namespace": "AWS/ApiGateway",
                    "MetricName": "Count",
                    "Dimensions": [
                        {
                            "Name": "ApiName",
                            "Value": "SmashRankerAPI"
                        },
                        {
                            "Name": "Stage",
                            "Value": "prod"
                        }
                    ]
                },
                "Period": 900,
                "Stat": "Sum"
            },
            "Label": "APIRequestCount",
            "ReturnData": true
        }
    ]' \
    --output json | jq -r '.MetricDataResults[0] | [.Timestamps, .Values] | transpose | map({"Timestamp": .[0], "Value": .[1]}) | (["Timestamp","Value"] | @tsv), (.[] | [.Timestamp, .Value] | @tsv)' | column -t




