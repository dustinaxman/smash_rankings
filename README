

aws dynamodb create-table \
    --table-name smash-tournaments-tracker-info \
    --attribute-definitions AttributeName=ID,AttributeType=S \
    --key-schema AttributeName=ID,KeyType=HASH \
    --billing-mode PAY_PER_REQUEST


aws dynamodb put-item \
    --table-name smash-tournaments-tracker-info \
    --item '{
        "ID": {"S": "tournament_info"},
        "google_sheets_url": {"S": "https://docs.google.com/spreadsheets/d/1va7cwOc-fAH2fj6dmnE-4i_m2uYhGIkQvha44fExG-k/edit?gid=639215028#gid=639215028"},
        "sheet_name": {"S": "TTS by Date (2024.2)"}
    }'

docker build -f Dockerfile.tournament_updater -t tournament_updater_image .

docker run -v /Users/deaxman/Downloads/all_smash_rankings:/data \
           -v ~/.aws:/root/.aws \
           tournament_updater_image




docker build -f Dockerfile.api -t smash-ranker-image .

docker run -v ~/.aws:/root/.aws smash-ranker-image


198449958201.dkr.ecr.${AWS::Region}.amazonaws.com/smash-ranker:${ImageTag}


docker run -p 8000:5000 -v ~/.aws:/root/.aws smash-ranker-image gunicorn -w "1" --timeout 300 -b 0.0.0.0:5000 app:app


curl -s "http://127.0.0.1:8000/get_ranking?ranking_to_run=trueskill&tier_options=P,S%2B,S,A%2B,A&start_date=2024-07-16T00:00:00&end_date=2024-11-06T00:00:00&evaluation_level=sets" | jq .
curl -X GET "http://127.0.0.1:8000/query_tournaments?tier_options=P,S%2B,S,A%2B,A&start_date=2021-06-16T00:00:00&end_date=2022-01-06T00:00:00" | jq .
aws ecr create-repository --repository-name smash-ranker --region us-east-1

aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 198449958201.dkr.ecr.us-east-1.amazonaws.com

docker tag smash-ranker:latest 198449958201.dkr.ecr.us-east-1.amazonaws.com/smash-ranker:latest



aws cloudformation create-stack --stack-name smash-ranker-api --template-body file://smash_ranking_api_cloudformation_template_serverless.yaml --parameters ParameterKey=ImageTag,ParameterValue=latest ParameterKey=SmashRankerAPIKey,ParameterValue=smash_ranker_api_secret_key --capabilities CAPABILITY_IAM


REGION=us-east-1


curl -X POST "https://{API_ID}.execute-api.{REGION}.amazonaws.com/prod/get_ranking" \
-H "x-api-key: smash_ranker_api_secret_key" \
-H "Content-Type: application/json" \
-d '{
    'ranking_to_run': 'elo'
    'tier_options': ("P", "S+", "S", "A+", "A")
    'start_date': '2018-07-16T00:00:00'
    'end_date':'2024-11-06T00:00:00'
    'evaluation_level': 'sets'
    }'



curl -X POST "https://{API_ID}.execute-api.{REGION}.amazonaws.com/prod/query_tournaments" \
-H "x-api-key: smash_ranker_api_secret_key" \
-H "Content-Type: application/json" \
-d '{
    'tier_options': ("P", "S+", "S", "A+", "A")
    'start_date': '2018-07-16T00:00:00'
    'end_date':'2024-11-06T00:00:00'
    }'






npx create-react-app smash-ranking-website


cd smash-ranking-website

npm install @mui/material @emotion/react @emotion/styled

npm install axios
npm install query-string


#change all of the files!!!

npm start



npm run build

aws s3api create-bucket --bucket smash-ranking-website --region us-east-1 --create-bucket-configuration LocationConstraint=us-east-1
aws s3 website s3://smash-ranking-website/ --index-document index.html --error-document 404.html

aws s3 sync ./build/ s3://smash-ranking-website/

cat <<EOL > bucket-policy.json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": "*",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::smash-ranking-website/*"
    }
  ]
}
EOL



aws s3api put-bucket-policy --bucket smash-ranking-website --policy file://bucket-policy.json
http://smash-ranking-website.s3-website-us-east-1.amazonaws.com






EXPNAME="pull-data-and-get-rankings"

instance_type="c7g.4xlarge"
# C5.micro
yourpemfilepath=/Users/deaxman/Downloads/main.pem
aws cloudformation create-stack --stack-name ${EXPNAME} --template-body file:///Users/${USER}/Projects/WorkerRunningScripts/cloudformation_template.yaml --capabilities CAPABILITY_IAM --parameters ParameterKey=KeyName,ParameterValue=$(echo ${yourpemfilepath} | xargs basename | sed 's/\.pem//g') ParameterKey=UserName,ParameterValue=${USER} ParameterKey=InstanceType,ParameterValue=${instance_type} ParameterKey=ExpName,ParameterValue=${EXPNAME} ParameterKey=ECSAMI,ParameterValue="ami-0e44d51e3d626379b"


cluster_id=$(aws ec2 describe-instances --filters Name=tag:"aws:cloudformation:stack-name",Values=${EXPNAME} | jq -r '.["Reservations"][-1]["Instances"][0]["PublicDnsName"]')
ssh -i ${yourpemfilepath} ec2-user@${cluster_id}



sudo yum -y install aws-cli
sudo yum -y install install python3-pip
sudo yum -y install vim
sudo yum -y install screen
python3 -m pip install pysmashgg
python3 -m pip install torch
python3 -m pip install numpy
python3 -m pip install boto3
python3 -m pip install tqdm
python3 -m pip install matplotlib
python3 -m pip install pandas


vim smash_lib.py

screen -S run

python3

from smash_ranking.ranking_tools import *


update_tournament_cache_and_upload(new_tournaments)



rankings_dict, selected_tournament_urls, config = run_new_ranking_and_backup(start_date, end_date)


rankings_dict, selected_tournament_urls, config = run_new_ranking_and_backup("6/14/2022", "11/6/2022")


rankings_dict, selected_tournament_urls, config = run_new_ranking_and_backup("6/14/2022", "11/5/2022", rankings_to_run=("h2h_ratio_games", "h2h_ratio_sets"), overwrite=True, prior=10)




screen -S run

python3

from smash_ranking.ranking_tools import *



new_tournaments = ['https://www.start.gg/tournament/let-s-make-big-moves-2023/event/ultimate-singles/matches',
                   'https://www.start.gg/tournament/sp9-umeburasp9/event/singles/matches',
                   'https://www.start.gg/tournament/genesis-9-1/event/ultimate-singles/matches',
                   'https://www.start.gg/tournament/9-16/event/singles/matches',
                   'https://www.start.gg/tournament/lvl-up-expo-2023-1/event/ultimate-singles-starts-saturday/matches',
                   'https://www.start.gg/tournament/top-11-maesumatop-11/event/singles-tournament/matches',
                   'https://www.start.gg/tournament/collision-2023-5/event/ultimate-singles/matches',
                   'https://www.start.gg/tournament/seibugeki-13/event/singles/matches',
                   'https://www.start.gg/tournament/smash-ultimate-summit-6/event/ultimate-singles/matches',
                   'https://www.start.gg/tournament/major-upset/event/ultimate-singles-7500-prize-pool/matches',
                    ]


from smash_ranking.ranking_tools import *

new_tournaments = [
                   'https://www.start.gg/tournament/genesis-9-1/event/ultimate-singles/matches',
                   'https://www.start.gg/tournament/9-16/event/singles/matches',
                   'https://www.start.gg/tournament/lvl-up-expo-2023-1/event/ultimate-singles-starts-saturday/matches',
                   'https://www.start.gg/tournament/top-11-maesumatop-11/event/singles-tournament/matches',
                   'https://www.start.gg/tournament/collision-2023-5/event/ultimate-singles/matches',
                   'https://www.start.gg/tournament/seibugeki-13/event/singles/matches',
                    ]



game_dict = update_tournament_cache_and_upload(new_tournaments)





python3

from smash_ranking.ranking_tools import *
import datetime
from dateutil.relativedelta import relativedelta
import numpy as np


def get_set_of_players_in_range(start_idx, end_idx, rankings_dict):
    return [player_name for player_name, score in sorted(rankings_dict["elo_sets"], key=lambda a: a[1], reverse=True)[start_idx:end_idx]]


def get_top_and_bottom_scores(start_idx1, end_idx1, start_idx2, end_idx2, rankings_dict, matchups, player_to_idx, player_list):
    player_idx_list_1 = set([player_to_idx[player_name] for player_name in get_set_of_players_in_range(start_idx1, end_idx1, rankings_dict)])
    player_idx_list_2 = set([player_to_idx[player_name] for player_name in get_set_of_players_in_range(start_idx2, end_idx2, rankings_dict)])
    examples = []
    top_score = 0
    bottom_score = 0
    for matchup in matchups:
        p1, p2, s1, s2 = matchup
        if p1 in player_idx_list_1 and p2 in player_idx_list_2:
            if s2 > 0:
                examples.append([player_list[p1], player_list[p2], s1, s2])
            top_score += s1
            bottom_score += s2
        if p2 in player_idx_list_1 and p1 in player_idx_list_2:
            if s1 > 0:
                examples.append([player_list[p1], player_list[p2], s1, s2])
            top_score += s2
            bottom_score += s1
    return top_score, bottom_score, examples



def get_ranking_range_win_ratio(start_idx1, end_idx1, start_idx2, end_idx2, start_date_str, end_date_str):
    get_recent_artifacts()
    tournament_to_date_dict = load_json(ALL_TOURNAMENTS_DATES_FILE)
    game_dict = load_json(ALL_TOURNAMENTS_GAMES_FILE)
    start_date = datetime.datetime.strptime(start_date_str, '%m/%d/%Y')
    end_date = datetime.datetime.strptime(end_date_str, '%m/%d/%Y')
    selected_tournament_urls = get_tournaments_from_date_range(tournament_to_date_dict, start_date=start_date, end_date=end_date)
    all_games = get_game_list_from_list_of_tournaments(game_dict, selected_tournament_urls)
    all_sets = convert_game_score_to_winlose_set(all_games)
    player_list = get_and_filter_player_list(all_sets, top=None, min_win_loss=0)
    matchups, player_to_idx = get_matchups(all_sets, player_list)
    rankings_dict, selected_tournament_urls, config = run_new_ranking_and_backup(start_date_str, end_date_str, rankings_to_run=("elo_sets"))
    return get_top_and_bottom_scores(start_idx1, end_idx1, start_idx2, end_idx2, rankings_dict, matchups, player_to_idx, player_list)







ranges = [[0, 5],
          [5, 10],
          [10, 20],
          [20, 50],
          [50, 100],
          [100, 100000]]

range_to_ratio_dict = {}

for range1 in ranges:
    for range2 in ranges:
        start_date = "8/1/2021"
        end_date = "5/1/2023"
        all_ratios = []
        all_examples = []
        end_date = datetime.datetime.strptime(end_date, '%m/%d/%Y')
        start_date_inc = datetime.datetime.strptime(start_date, '%m/%d/%Y')
        end_date_inc = start_date_inc + relativedelta(months=6)
        print(start_date_inc.strftime('%m/%d/%Y'), end_date_inc.strftime('%m/%d/%Y'))
        r1, r2, example = get_ranking_range_win_ratio(range1[0], range1[1], range2[0], range2[1], start_date_inc.strftime('%m/%d/%Y'), end_date_inc.strftime('%m/%d/%Y'))
        all_ratios.append([r1, r2])
        all_examples.append(example)
        while end_date_inc < end_date:
            start_date_inc += relativedelta(months=6)
            end_date_inc += relativedelta(months=6)
            print(start_date_inc.strftime('%x'), end_date_inc.strftime('%x'))
            r1, r2, example = get_ranking_range_win_ratio(range1[0], range1[1], range2[0], range1[1], start_date_inc.strftime('%m/%d/%Y'), end_date_inc.strftime('%m/%d/%Y'))
            all_ratios.append([r1, r2])
            all_examples.append(example)
        range_to_ratio_dict[(tuple(range1), tuple(range2),)] = np.sum(all_ratios, axis=0)[1]/np.sum(all_ratios)



range_to_ratio_dict_df = defaultdict(lambda: defaultdict())

for k, v in range_to_ratio_dict.items():
    if k[0][0] <= k[1][0]:
        range_to_ratio_dict_df[k[1]][k[0]] = 1- v
        range_to_ratio_dict_df[k[0]][k[1]] = v


import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

df = pd.DataFrame(range_to_ratio_dict_df)
table = df.pivot('Y', 'X', 'Value')
ax = sns.heatmap(table)
ax.invert_yaxis()
print(table)
plt.show()


TODO:
where is kurama
format everything nicely, put it in a repo and put in github, dockerize it, make it a flask??
make a diffing function
rethink alg (why does big d have a low variance but not a lot of sets)



######### GET MATCHUP TABLE ######

start_date="6/14/2022"
end_date="11/27/2022"

player_list = ["MkLeo", "あcola", "Light", "ProtoBanham", "Tea", "Onin", "Sparg0", "Riddles", "Shuton", "Glutonny", "Dabuz", "Tweek", "ヨシドラ", "Sonix", "ミーヤー", "Maister", "Kola", "Zomba", "KEN", "Bloom4Eva", "Kurama", "Asimo", "Cosmos", "Sisqui", "zackray"]


df = get_matchup_table(start_date=start_date, end_date=end_date, player_list=player_list).T


################################



new_tournaments = ["https://www.start.gg/tournament/ultimate-fighting-arena-2022/event/super-smash-bros-ultimate-single-1vs1", "https://www.start.gg/tournament/port-priority-7/event/ultimate-singles", "https://www.start.gg/tournament/seibugeki-12/event/singles/overview", "https://www.start.gg/tournament/mainstage-2022/event/ultimate-singles", "https://www.start.gg/tournament/scuffed-world-tour/event/ultimate-singles"]


update_tournament_cache_and_upload(new_tournaments)




player_list = ["MkLeo", "あcola", "Sparg0", "Light", "ProtoBanham", "Tea", "Onin", "Riddles", "Shuton", "Glutonny", "Dabuz", "Tweek", "ヨシドラ", "Sonix", "ミーヤー", "Maister", "Kola", "Zomba", "Kurama", "Kameme"]

start_date="1/01/2022"
end_date="12/27/2022"

df = get_matchup_table(start_date=start_date, end_date=end_date, player_list=player_list).T



start_date="1/01/2022"
end_date="12/27/2022"
start_date = datetime.datetime.strptime(start_date, '%m/%d/%Y')
end_date = datetime.datetime.strptime(end_date, '%m/%d/%Y')
tournament_to_date_dict = load_json(ALL_TOURNAMENTS_DATES_FILE)
game_dict = load_json(ALL_TOURNAMENTS_GAMES_FILE)
selected_tournament_urls = get_tournaments_from_date_range(tournament_to_date_dict, start_date=start_date, end_date=end_date)
all_games = get_game_list_from_list_of_tournaments(game_dict, selected_tournament_urls)
all_games = convert_game_score_to_winlose_set(all_games)
matchups, player_to_idx = get_matchups(all_games, player_list)



[matchup for matchup in matchups if set([matchup[0], matchup[1]) == set([player_to_idx["Tweek"], player_to_idx["Light"]])]


[game for game in game_dict["https://www.start.gg/tournament/mainstage-2022/event/ultimate-singles"] if set([game[0], game[2]]) == set(["Tweek", "Sparg0"])]

mkleo
acola
spargo
light
proto
onin


tweek
shuton
tea
riddles
gluto


dabuz
yoshidora
Sonix
MIYA
Maister
Kola
Zomba
kurama
kameme




prob_success_given_prev_trails(14, 3)




### GET LIKELIHOOD OF WINNING VS ALL #####

p1_prob = []
for p1 in player_list:
    player_prob_list = []
    for p2 in player_list:
        if p2 not in matchup_table[p1]:
            player_prob_list.append(0.5)
        else:
            s1, s2 = matchup_table[p1][p2]
            player_prob_list.append(prob_success_given_prev_trails(s1+s2, s1))
    p1_prob.append([p1, np.prod(player_prob_list)])


sorted(p1_prob, key=lambda a: a[1], reverse=True)


def magnitude_winning_matchups(list_of_matchups):
    return np.prod([prob_success_given_prev_trails(m[0]+ m[1], m[0]) for m in list_of_matchups])


[p for p, _ in sorted(matchup_table.items(), key=lambda a: magnitude_winning_matchups(a[1].values()), reverse=True)]
















def run_new_ranking(start_date, end_date, top_player_number=None, min_win_loss=1, overwrite=False):
    tournament_to_date_dict = load_json(ALL_TOURNAMENTS_DATES_FILE)
    game_dict = load_json(ALL_TOURNAMENTS_GAMES_FILE)
    selected_tournament_urls = get_tournaments_from_date_range(tournament_to_date_dict, start_date=start_date, end_date=end_date)
    uniq_tourneyset_str = ",".join(sorted(["/".join([t.split("/")[4], t.split("/")[6]]) for t in selected_tournament_urls))
    uniq_tourneyset_key = hashlib.sha256(uniq_tourneyset_str.encode()).hexdigest()
    tmp_results_file = Path().home()/'tmp_results_file.json'
    if tmp_results_file.exists():
        tmp_results_file.unlink()
    if overwrite or uniq_tourneyset_key not in ddb: #TODO: fix
        rankings_dict, selected_tournament_urls, config = get_rankings(start_date=datetime.datetime(2022, 6, 14, 0, 0), end_date=datetime.datetime(2022, 10, 28, 0, 0), top_player_number=top_player_number, min_win_loss=min_win_loss, rankings_to_run=("elo_games", "elo_sets", "h2h_ratio_games"), refresh_artifacts=True)

        results_s3_uri =
        with open(tmp_results_file, 'w') as f:
            json.dump(rankings_dict, f, cls=NpEncoder)
        #move tmp_results_file to results_s3_uri
        #put key in table uniq_tourneyset_key results_s3_uri
    else:
        #get from ddb uniq_tourneyset_key results_s3_uri
        #download_from table




